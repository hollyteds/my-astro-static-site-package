---
import { Picture, BackgroundImage, BackgroundPicture } from "astro-simple-art-direction";
// import faviconSrc from "@images/favicon.png";
import { getImage } from "astro:assets";

const siteName: string = "My Astro Static Site Package";
const defaultDescription = ""
// const favicon = {
//   default: await getImage({ src: faviconSrc, width: 32, format: "webp" }),
//   large: await getImage({ src: faviconSrc, width: 192, format: "webp" }),
//   apple: await getImage({ src: faviconSrc, width: 160, format: "webp" }),
// };

interface Props {
  title: string;
  meta?: Record<string, string>;
  ogp?: OGP;
  schema?: string;
}

const { title, meta: pageMeta, schema: pageSchema, ogp: pageOgp } = Astro.props;

const meta: Record<string, string> = {
  viewport: "width=device-width",
  "format-detection": "telephone=no",
  description: defaultDescription,
  "twitter:card": "summary_large_image",
  "google-site-verification": "", // Google Search Console
  ...pageMeta,
};


const ogp: OGP = {
  title: __SITE_NAME__,
  description: defaultDescription,
  type: "website",
  // image: Astro.url.href + ogpImage.src,
  url: Astro.url.href,
  site_name: __SITE_NAME__, // astro.config.mjsで定義したサイト名
  ...pageOgp,
};

const schema: string = JSON.stringify({
  "@context": "https://schema.org",
  "@type": "Organization",
  name: __SITE_NAME__,
  url: Astro.url.href,
  // logo: favicon.large.src,
  contactPoint: {
    telephone: "+81-3-1234-1234",
    faxNumber: "+81-3-1234-1234",
    contactType: "代表",
    areaServed: "JP",
    availableLanguage: ["Japanese"],
  },
  address: {
    "@type": "PostalAddress",
    streetAddress: "千代田１",
    postalCode: "100-0000",
    addressLocality: "千代田区",
    addressRegion: "東京都",
    addressCountry: "JP",
  },
});
---

<!doctype html>
<html lang="ja" style="--header-height: 70px; --nav-height: 400px;" data-menu-button-target>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>{title}</title>
    {
      // metaの出力
      Object.entries(meta).map(([key, value]) => value && value !== "" && <meta name={key} content={value} />)
    }
    {
      // ogpの出力
      Object.entries(ogp).map(([key, value]) => value && value !== "" && <meta property={"og:" + key} content={value} />)
    }
    {/* 
    <link rel="icon" type="image/webp+xml" href={favicon.default.src}/>
    <link rel="icon" href={favicon.large.src} sizes="192x192" />
    <link rel="apple-touch-icon" href={favicon.apple.src} />
    */}
    <script type="application/ld+json" set:html={schema} />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="https://######.jp/sitemap-index.xml" />
  </head>
  <body id="top" class="">
    <slot />{/*
    <div id="top-button">
      <a href="#top">
        <!-- <Picture
          src={{
            file: "img-top-button.svg",
            width: 50,
            height: 50,
          }}
          artDirectives={[
            {
              media: "(min-width: 768px)",
              file: "img-top-button-l.svg",
              width: 50,
              height: 50,
            },
          ]}
          loading="eager"
          alt="トップへ戻る"
        /> -->
      </a>
    </div>
    <div id="scroll-observer" aria-hidden="true" class="pointer-events-none invisible absolute top-0 h-dvh"></div> */}
  </body>
  <script>
    /* スモールデバイス用対策モジュール */
    import switchViewport from "@modules/fixViewport";

    /* メニューボタンの発火モジュール */
    import SetMenuButton from "@modules/SetMenuButton"; 

    /* スムーススクロール */
    import SmoothScroll from "@modules/SmoothScroll";

    import addAriaHiddenToBrTags from '@modules/addAriaHiddenToBrTags';

    // import ScrollObserver from "@modules/ScrollObserver"; // スクロール時の固定フッター設定用インスタンス
    
    // 最小ウインドウ幅
    const minWindowWidth: number = 375; 

    const setMenuButton = new SetMenuButton;

    addAriaHiddenToBrTags();

    // イベント **********************************************************

    // ぺージロード時に処理
    document.addEventListener("DOMContentLoaded", () => {
      switchViewport(minWindowWidth);
      new SmoothScroll();
    });

    document.addEventListener("load", () => {
      setMenuPosition();
      setNavHeight();
    });

    // リサイズ時に処理
    window.addEventListener('resize', () => {
      switchViewport(minWindowWidth);
      setMenuPosition();
      setNavHeight();
    }, false);


    // 関数 **********************************************************

    const setMenuPosition = () => {
      const screenWidth = window.innerWidth;
      const targetElement: HTMLElement | null = screenWidth >= 1024
        ?	document.getElementById('nav') : document.getElementById('header');

      document.documentElement.style.setProperty('--header-height', `${targetElement?.clientHeight}px`);
    }

    const setNavHeight = () => {
      const targetElement: HTMLElement | null = document.getElementById('nav');

      document.documentElement.style.setProperty('--nav-height', `${targetElement?.clientHeight}px`);
    }
  </script>
</html>
<style is:global>
  * {
    min-inline-size: 0
  }
  :where(body) {
    @apply leading-relaxed underline-offset-2;
  }
  :where(svg) {
    fill: currentColor;
  }
  #top-button {
    position: fixed;
    opacity: 0;
    transition: opacity 0.3s;
    right: 0;
    bottom: -10px;
    z-index: 10px;
    pointer-events: none;
  }
  @media (min-width: 768px) {
    #top-button {
      right: 20px;
      bottom: 20px;
    }
  }
  .is-show-button #top-button {
    display: block;
    opacity: 1;
    pointer-events: auto;
  }
</style>
